package mylab;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.StringTokenizer;

/*
 * 	3 2 1 -3 -1

	1 2 3 4 5
	2 3 4 5    1회
	3 4 5 2    2회
	4 5 2 3    3회

	4 5 2 3
	5 2 3	0회
	3 5 2	1회
	2 3 5	2회
	5 2 3	3회

	첫번째를 요소를 터트리고 (poll) 
	-> arr[poll한 값-1]의 숫자(터트려서 나온숫자)의 절댓값(음수도 있기 때문에)만큼 아래의 행동 반복
		양수면 addLast(poll())      -> 양수일때는 터트린 상태의 덱을 1회로 카운트해야함
		음수면 addFirst(pollLast()) -> 음수일때는 터트린 상태의 덱을 0회로 카운트 해야함
 * 
 * */

public class B2346 {
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int n = Integer.parseInt(br.readLine());
		StringBuilder sb = new StringBuilder();
		Deque<Integer> deque = new ArrayDeque<>();
		int[] arr_num = new int[n];
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");

		for (int i = 0; i < arr_num.length; i++) {
			arr_num[i] = Integer.parseInt(st.nextToken());
			deque.add(i + 1);
		}

		while (!deque.isEmpty()) {
			int pollNum = deque.poll();
			int poppedNum = arr_num[pollNum - 1];

			sb.append(pollNum + " ");
			
			if(deque.isEmpty()) break;
			
			if (poppedNum > 0) {
				for (int j = 0; j < poppedNum - 1; j++) {
					deque.addLast(deque.poll());
				}
			} else {
				for (int j = 0; j < Math.abs(poppedNum); j++) {
					deque.addFirst(deque.pollLast());
				}
			}

		}

		System.out.println(sb);
	}
}
